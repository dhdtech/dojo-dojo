openapi: 3.0.0
info:
  contact:
    email: diogo.hudson@gmail.com
    name: Diogo Hudson Dias
  description: Simple appointment API for testing purpose on apponintments.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: DR Manager - Appointment API
  version: 1.0.0
servers:
- description: SwaggerHub API Auto Mocking
  url: http://localhost:5000/1.0.0
tags:
- description: Physician related endpoints
  name: physician
- description: Patient related endpoints
  name: patient
- description: Appointment related endpoints
  name: appointment
paths:
  /appointment:
    get:
      description: |
        By passing in the appropriate options, you can search for
        available appointments in the system
      operationId: search_appointments
      parameters:
      - description: pass an optional search string for looking up patients name
        explode: true
        in: query
        name: searchPatient
        required: false
        schema:
          type: string
        style: form
      - description: pass an optional search string for looking up physicians name
        explode: true
        in: query
        name: searchPhysician
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Appointment'
                type: array
          description: search results matching criteria
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: list appointments
      tags:
      - appointment
      x-openapi-router-controller: drm_appointment.controllers.appointment_controller
    post:
      operationId: add_appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentPostData'
      responses:
        "201":
          description: Created
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Add a new appointment
      tags:
      - appointment
      x-openapi-router-controller: drm_appointment.controllers.appointment_controller
    put:
      operationId: update_appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        "204":
          description: Update
        "400":
          description: bad input parameter
      security:
      - bearerAuth: []
      summary: Updates a physician
      tags:
      - appointment
      x-openapi-router-controller: drm_appointment.controllers.appointment_controller
  /appointment/endAppointment:
    post:
      operationId: end_appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndAppointmentData'
      responses:
        "201":
          description: Created
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Ends an Appointment
      tags:
      - appointment
      x-openapi-router-controller: drm_appointment.controllers.appointment_controller
  /appointment/startAppointment:
    post:
      operationId: start_appointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAppointmentData'
      responses:
        "201":
          description: Created
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Start an Appointment
      tags:
      - appointment
      x-openapi-router-controller: drm_appointment.controllers.appointment_controller
  /patient:
    get:
      description: |
        By passing in the appropriate options, you can search for
        available patients in the system
      operationId: search_patients
      parameters:
      - description: pass an optional search string for looking up patient name
        explode: true
        in: query
        name: searchName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Patient'
                type: array
          description: search results matching criteria
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: list patients
      tags:
      - patient
      x-openapi-router-controller: drm_appointment.controllers.patient_controller
    post:
      operationId: add_patient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientPostData'
      responses:
        "201":
          description: Created
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Add a new patient
      tags:
      - patient
      x-openapi-router-controller: drm_appointment.controllers.patient_controller
    put:
      operationId: update_patient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        "204":
          description: Updated
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Updates a patient
      tags:
      - patient
      x-openapi-router-controller: drm_appointment.controllers.patient_controller
  /physician:
    get:
      description: |
        By passing in the appropriate options, you can search for
        available physicians in the system
      operationId: search_physicians
      parameters:
      - description: pass an optional search string for looking up physician name
        explode: true
        in: query
        name: searchName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Physician'
                type: array
          description: search results matching criteria
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: list physicians
      tags:
      - physician
      x-openapi-router-controller: drm_appointment.controllers.physician_controller
    post:
      operationId: add_physician
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicianPostData'
      responses:
        "201":
          description: Created
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Add a new physician
      tags:
      - physician
      x-openapi-router-controller: drm_appointment.controllers.physician_controller
    put:
      operationId: update_physician
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Physician'
      responses:
        "204":
          description: Updated
        "400":
          description: bad input parameter
        "403":
          description: Token is invalid.
      security:
      - bearerAuth: []
      summary: Updates a physician
      tags:
      - physician
      x-openapi-router-controller: drm_appointment.controllers.physician_controller
components:
  schemas:
    Patient:
      description: Patient data
      example:
        name: Patient full name
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
      properties:
        id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          title: id
          type: string
          x-server-default: Unknown
          x-primary-key: true
        name:
          example: Patient full name
          title: name
          type: string
          x-index: true
      title: Patient
      type: object
      x-tablename: patient
    PatientPostData:
      description: Patient Data
      example:
        name: Patient full name
      properties:
        name:
          example: Patient full name
          type: string
      required:
      - name
      type: object
    PatientReferalId:
      description: Patient Data
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
      title: PatientReferalId
      type: object
    Physician:
      description: Physician Data
      example:
        name: Physician full name
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
      properties:
        id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          title: id
          type: string
          x-server-default: Unknown
          x-primary-key: true
        name:
          example: Physician full name
          title: name
          type: string
          x-server-default: Unknown
          x-index: true
      title: Physician
      type: object
      x-tablename: physician
    PhysicianPostData:
      description: Physician Data
      example:
        name: Physician full name
      properties:
        name:
          example: Physician full name
          type: string
      required:
      - name
      type: object
    PhysicianReferalId:
      description: Physician Data
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string
      title: PhysicianReferalId
      type: object
    Appointment:
      description: Appontiment Data
      example:
        end_date: 2021-01-30T09:30:00Z
        patient:
          name: Patient full name
          id: d290f1ee-6c54-4b01-90e6-d701748f0851
        price: 200.0
        physician:
          name: Physician full name
          id: d290f1ee-6c54-4b01-90e6-d701748f0851
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        start_date: 2021-01-30T08:30:00Z
      properties:
        id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          title: id
          type: string
          x-primary-key: true
          x-server-default: Unknown
        start_date:
          example: 2021-01-30T08:30:00Z
          format: date-time
          title: start_date
          type: string
          x-index: true
        end_date:
          example: 2021-01-30T09:30:00Z
          format: date-time
          title: end_date
          type: string
          x-index: true
        physician:
          $ref: '#/components/schemas/Physician'
        patient:
          $ref: '#/components/schemas/Patient'
        price:
          example: 200.0
          format: float
          title: price
          type: number
      title: Appointment
      type: object
      x-tablename: appointment
    AppointmentPostData:
      description: Appontiment Data
      example:
        end_date: 2021-01-30T09:30:00Z
        patient:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        price: 200.0
        physician:
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        start_date: 2021-01-30T08:30:00Z
      properties:
        start_date:
          example: 2021-01-30T08:30:00Z
          format: date-time
          type: string
        end_date:
          example: 2021-01-30T09:30:00Z
          format: date-time
          type: string
        physician:
          $ref: '#/components/schemas/PhysicianReferalId'
        patient:
          $ref: '#/components/schemas/PatientReferalId'
        price:
          example: 200.0
          format: float
          type: number
      type: object
    StartAppointmentData:
      example:
        physician_id: d290f1ee-6c54-4b01-90e6-d701748f0851
        patient_id: d290f1ee-6c54-4b01-90e6-d701748f0851
      properties:
        physician_id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          type: string
        patient_id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          type: string
      type: object
    EndAppointmentData:
      example:
        appointment_id: d290f1ee-6c54-4b01-90e6-d701748f0851
      properties:
        appointment_id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: drm_appointment.controllers.security_controller_.info_from_bearerAuth
