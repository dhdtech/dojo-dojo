openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:5000/1.0.0
info:
  description: Simple appointment API for testing purpose on apponintments.
  version: "1.0.0"
  title: DR Manager - Appointment API
  contact:
    email: diogo.hudson@gmail.com
    name: Diogo Hudson Dias
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: physician
    description: Physician related endpoints
  - name: patient
    description:  Patient related endpoints
  - name: appointment
    description:  Appointment related endpoints
paths:
  /appointment/startAppointment:
    post:
      security:
        - bearerAuth: []
      tags: [appointment]
      summary: Start an Appointment
      operationId: startAppointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAppointmentData'
      responses:
        '201':
          description: Created
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
  /appointment/endAppointment:
    post:
      security:
        - bearerAuth: []
      tags: [appointment]
      summary: Ends an Appointment
      operationId: endAppointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndAppointmentData'
      responses:
        '201':
          description: Created
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.              
  /appointment:
    get:
      security:
        - bearerAuth: []
      tags: [appointment]
      summary: list appointments
      operationId: searchAppointments
      description: |
        By passing in the appropriate options, you can search for
        available appointments in the system
      parameters:
        - in: query
          name: searchPatient
          description: pass an optional search string for looking up patients name
          required: false
          schema:
            type: string
        - in: query
          name: searchPhysician
          description: pass an optional search string for looking up physicians name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    post:
      security:
        - bearerAuth: []
      tags: [appointment]
      summary: Add a new appointment
      operationId: addAppointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentPostData'
      responses:
        '201':
          description: Created
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    put:
      security:
        - bearerAuth: []
      tags: [appointment]
      summary: Updates a physician
      operationId: updateAppointment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '204':
          description: Update
        '400':
          description: bad input parameter
  /physician:
    get:
      security:
        - bearerAuth: []
      tags: [physician]
      summary: list physicians
      operationId: searchPhysicians
      description: |
        By passing in the appropriate options, you can search for
        available physicians in the system
      parameters:
        - in: query
          name: searchName
          description: pass an optional search string for looking up physician name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Physician'
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    post:
      security:
        - bearerAuth: []
      tags: [physician]
      summary: Add a new physician
      operationId: addPhysician
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhysicianPostData'
      responses:
        '201':
          description: Created
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    put:
      security:
        - bearerAuth: []
      tags: [physician]
      summary: Updates a physician
      operationId: updatePhysician
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Physician'
      responses:
        '204':
          description: Updated
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
  /patient:
    get:
      security:
        - bearerAuth: []
      tags: [patient]
      summary: list patients
      operationId: searchPatients
      description: |
        By passing in the appropriate options, you can search for
        available patients in the system
      parameters:
        - in: query
          name: searchName
          description: pass an optional search string for looking up patient name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    post:
      security:
        - bearerAuth: []
      tags: [patient]
      summary: Add a new patient
      operationId: addPatient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientPostData'
      responses:
        '201':
          description: Created
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
    put:
      security:
        - bearerAuth: []
      tags: [patient]
      summary: Updates a patient
      operationId: updatePatient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '204':
          description: Updated
        '400':
          description: bad input parameter
        '403':
          description: Token is invalid.
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: "JWT"
  schemas:
    Patient:
      x-tablename: patient
      description: Patient data
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-server-default: Unknown
          x-primary-key: true
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          x-index: true
          example: Patient full name
    PatientPostData:
      description: Patient Data
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Patient full name          
    PatientReferalId:
      description: Patient Data
      type: object
      properties:
        id:
          type: string
          format: uuid          
    Physician:
      x-tablename: physician
      description: Physician Data
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-server-default: Unknown
          x-primary-key: true
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          x-server-default: Unknown
          x-index: true
          example: Physician full name
    PhysicianPostData:
      description: Physician Data
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Physician full name          
    PhysicianReferalId:
      description: Physician Data
      type: object
      properties:
        id:
          type: string
          format: uuid          
    Appointment:
      x-tablename: appointment
      description: Appontiment Data
      type: object
      properties:
        id:
          type: string
          x-primary-key: true
          x-server-default: Unknown
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        start_date:
          type: string
          format: date-time
          example: '2021-01-30T08:30:00Z'
          x-index: true
        end_date:
          type: string
          format: date-time
          example: '2021-01-30T09:30:00Z'
          x-index: true
        physician:
          $ref: '#/components/schemas/Physician'
        patient:
          $ref: '#/components/schemas/Patient'
        price:
          type: number
          format: float
          example: 200.00
    AppointmentPostData:
      description: Appontiment Data
      type: object
      properties:
        start_date:
          type: string
          format: date-time
          example: '2021-01-30T08:30:00Z'
        end_date:
          type: string
          format: date-time
          example: '2021-01-30T09:30:00Z'
        physician:
          $ref: '#/components/schemas/PhysicianReferalId'
        patient:
          $ref: '#/components/schemas/PatientReferalId'
        price:
          type: number
          format: float
          example: 200.00          
    StartAppointmentData:
      type: object
      properties:
        physician_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        patient_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
    EndAppointmentData:
      type: object
      properties:
        appointment_id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          
