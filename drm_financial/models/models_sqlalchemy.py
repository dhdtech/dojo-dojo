"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore


class ChargeDict(typing.TypedDict, total=False):
    """TypedDict for properties that are not required."""

    id: str
    appointment_id: typing.Optional[str]
    amount: typing.Optional[float]


class TCharge(typing.Protocol):
    """
    SQLAlchemy model protocol.

    Charge data

    Attrs:
        id: The id of the Charge.
        appointment_id: The appointment_id of the Charge.
        amount: The amount of the Charge.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: "sqlalchemy.Column[str]"
    appointment_id: "sqlalchemy.Column[typing.Optional[str]]"
    amount: "sqlalchemy.Column[typing.Optional[float]]"

    def __init__(
        self,
        id: typing.Optional[str] = None,
        appointment_id: typing.Optional[str] = None,
        amount: typing.Optional[float] = None,
    ) -> None:
        """
        Construct.

        Args:
            id: The id of the Charge.
            appointment_id: The appointment_id of the Charge.
            amount: The amount of the Charge.

        """
        ...

    @classmethod
    def from_dict(
        cls,
        id: typing.Optional[str] = None,
        appointment_id: typing.Optional[str] = None,
        amount: typing.Optional[float] = None,
    ) -> "TCharge":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: The id of the Charge.
            appointment_id: The appointment_id of the Charge.
            amount: The amount of the Charge.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TCharge":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> ChargeDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Charge: typing.Type[TCharge] = models.Charge  # type: ignore
